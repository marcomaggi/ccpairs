\input texinfo.tex
@c %**start of header
@setfilename ccpairs.info
@settitle CCPairs
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      CCPairs

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    CCPairs

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           ccpairs

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2017

@c ------------------------------------------------------------

@set GITHUB_URL                 @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set BITBUCKET_URL              @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DOWNLOAD_URL               @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}/downloads}
@set DOCUMENTATION_URL          @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{VERSION} of @value{PACKAGE}, a C11 language library
implementing a simply linked lists data structures, in the style of the Scheme language.

The package is distributed under the terms of the @gnu{} Lesser General Public License (@gpl{}).

The latest release can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} General
Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* ccpairs: (ccpairs).           Scheme pairs and lists for C11.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* version::                     Version functions.
* pairs::                       Pair data structures.
* memory::                      Memory allocation.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}, a C11 language library
implementing simply linked lists data structures, in the style of the Scheme language.

@value{PACKAGE} installs the single header file @file{ccpairs.h}.  All the function names in the
@api{} are prefixed with @code{ccpair_}; all the preprocessor symbol names are prefixed with
@code{CCPAIR_}; all the type names are prefixed with @code{ccpair_} and suffixed with @code{_t}.

The library's @api{} uses both @code{inline} functions and preprocessor macros to integrate some
common operations at the call site.

@menu
* overview linking::            Linking code with the library.
@end menu

@c page
@node overview linking
@section Linking code with the library


This package installs a data file for @command{pkg-config}, so when searching for the installed
library with the @gnu{} Autotools, we can add the following macro use to @file{configure.ac}:

@example
PKG_CHECK_MODULES([CCPAIRS],[ccpairs >= 0.1])
@end example

@noindent
which will set the variables @code{CCPAIR_LIBS} and @code{CCPAIR_CFLAGS}.

Alternatively we can use the raw @gnu{} Autoconf macros:

@example
AC_CHECK_LIB([ccpairs],[cct_version_string],,
  [AC_MSG_FAILURE([test for CCPairs library failed])])
AC_CHECK_HEADERS([ccpairs.h],,
  [AC_MSG_FAILURE([test for CCPairs header failed])])
@end example

@c page
@node version
@chapter Version functions


The installed libraries follow version numbering as established by the @gnu{} Autotools.  For an
explanation of interface numbers as managed by @gnu{} Libtool @xref{Libtool versioning, interface,
Libtool's versioning system, libtool, Shared library support for @gnu{}}.


@deftypefun {const char *} ccpair_version_string (void)
Return a pointer to a statically allocated @asciiz{} string representing the interface version
number.
@end deftypefun


@deftypefun int ccpair_version_interface_current (void)
Return an integer representing the library interface current number.
@end deftypefun


@deftypefun int ccpair_version_interface_revision (void)
Return an integer representing the library interface current revision number.
@end deftypefun


@deftypefun int ccpair_version_interface_age (void)
Return an integer representing the library interface current age.
@end deftypefun

@c page
@node pairs
@chapter Pair data structures


Pairs are meant to compose simply linked lists as follows:

@example
 -------
| A | D |
 -------
  |   |     -------
  v    --> | A | D |
value       -------
             |   |     -------
             v    --> | A | D |
           value       -------
                        |   |
                        v    --> NULL
                      value
@end example

@noindent
where both @var{A} and @var{D} are pointers; this picture represents the layout of a list of three
items.  Pairs are meant to be allocated on the heap, using a custom memory allocator.


@deftp {Struct Typedef} ccpair_stru_t
Structure type representing a pair.  It is composed of two machine words.  From the point of view of
client code: @strong{pairs are immutable}.
@end deftp


@deftp {Pointer Typedef} ccpair_t
Pointer type representing a pointer to @objtype{ccpair_stru_t}.
@end deftp


@deftypefun uintptr_t ccpair_car (ccpair_t @var{P})
Return the first value in the pair as unsigned integer.
@end deftypefun


@deftypefun ccpair_t ccpair_cdr (ccpair_t @var{P})
Return the second value in the pair as pointer to pair.
@end deftypefun


@deftypefun uintptr_t ccpair_cdr_value (ccpair_t @var{P})
Return the second value in the pair as unsigned integer.
@end deftypefun


@deftypefun void ccpair_cons (uintptr_t @var{A}, ccpair_t @var{D})
Allocate a new pair using the currently selected memory allocator.  Initialise the first value with
@var{A} and the second value with @var{D}.
@end deftypefun


@deftypefun void ccpair_free (ccpair_t @var{P})
Release the memory allocated for @var{P} using the currently selected memory allocator.
@end deftypefun

@c page
@node memory
@chapter Memory allocation


@deftp {Function Type} ccpair_malloc_fun_t
Type of functions internally used to allocate instances of @objtype{ccpair_stru_t}.  It is defined
as:

@example
ccpair_t ccpair_malloc_fun_t (void)
@end example
@end deftp


@deftp {Function Type} ccpair_free_fun_t
Type of functions internally used to release instances of @objtype{ccpair_stru_t}.  It is defined
as:

@example
void ccpair_free_fun_t (ccpair_t @var{P})
@end example
@end deftp


@deftypefun void ccpair_memory_set_malloc_fun (ccpair_malloc_fun_t * @var{F})
Register a memory allocation function which will be used to allocate instances of
@objtype{ccpair_stru_t}.
@end deftypefun


@deftypefun void ccpair_memory_set_free_fun (ccpair_free_fun_t * @var{F})
Register a memory release function which will be used to release instances of
@objtype{ccpair_stru_t}.
@end deftypefun


@deftypefun ccpair_t ccpair_malloc (void)
Allocate a new pair structure and return a pointer to it.  The function preselected by
@value{PACKAGE} makes use of the standard @cfunc{malloc}.
@end deftypefun


@deftypefun void ccpair_free (ccpair_t @var{P})
Release the memory previously allocated for a pair with @cfunc{ccpair_malloc}.  The function
preselected by @value{PACKAGE} makes use of the standard @cfunc{free}.
@end deftypefun

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include lgpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DOCUMENTATION_URL}

@noindent
the latest release of this package can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

