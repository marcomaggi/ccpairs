\input texinfo.tex
@c %**start of header
@setfilename ccpairs.info
@settitle CCPairs
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      CCPairs

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    CCPairs

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           ccpairs

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2017

@c ------------------------------------------------------------

@set GITHUB_URL                 @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set BITBUCKET_URL              @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DOWNLOAD_URL               @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}/downloads}
@set DOCUMENTATION_URL          @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{VERSION} of @value{PACKAGE}, a C11 language library
implementing a simply linked lists data structures, in the style of the Scheme language.

The package depends upon the external package CCExceptions at least version 0.6, and relies on
@command{pkg-config} to find it installed on the system.

The package is distributed under the terms of the @gnu{} Lesser General Public License (@gpl{}).

The latest release can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} General
Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* ccpairs: (ccpairs).           Scheme pairs and lists for C11.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* init::                        Library initialisation.
* version::                     Version functions.
* pairs::                       Pair data structures.
* memory::                      Memory allocation.
* accessors::                   Accessing items in lists.
* conditions::                  Exceptional condition objects.
* handlers::                    Exceptional condition handlers.

Appendices

* Package License::             GNU Lesser General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}, a C11 language library
implementing simply linked lists data structures, in the style of the Scheme language.

The package depends upon the external package CCExceptions at least version 0.6, and relies on
@command{pkg-config} to find it installed on the system.

@value{PACKAGE} installs the single header file @file{ccpairs.h}.  All the function names in the
@api{} are prefixed with @code{ccpair_}; all the preprocessor symbol names are prefixed with
@code{CCPAIR_}; all the type names are prefixed with @code{ccpair_} and suffixed with @code{_t}.

The library's @api{} uses both @code{inline} functions and preprocessor macros to integrate some
common operations at the call site.

Notice that, before using the library, we need to call the global initialisation function
@cfunc{ccpair_init}.

@strong{IMPORTANT} To use the library we must enable the @posix{} features when including the
standard header files; so either we include @file{ccpair.h} as first header, or we include the
following definitions before including @strong{all} the header files:

@example
#define _POSIX_C_SOURCE         200809L
@end example

@menu
* overview linking::            Linking code with the library.
@end menu

@c page
@node overview linking
@section Linking code with the library


This package installs a data file for @command{pkg-config}, so when searching for the installed
library with the @gnu{} Autotools, we can add the following macro use to @file{configure.ac}:

@example
PKG_CHECK_MODULES([CCPAIRS],[ccpairs >= 0.1])
@end example

@noindent
which will set the variables @code{CCPAIR_LIBS} and @code{CCPAIR_CFLAGS}.

Alternatively we can use the raw @gnu{} Autoconf macros:

@example
AC_CHECK_LIB([ccpairs],[cct_version_string],,
  [AC_MSG_FAILURE([test for CCPairs library failed])])
AC_CHECK_HEADERS([ccpairs.h],,
  [AC_MSG_FAILURE([test for CCPairs header failed])])
@end example

@c page
@node init
@chapter Library initialisation


@deftypefun void ccpair_init (void)
Initialise the internal structures of the library.  It is fine to call this function multiple times.

@quotation
@strong{NOTE} This function is defined with the @gcc{} attribute @code{constructor}, so, when the
library is built with @gcc{}: it will be called automatically by the library initialisation code.
@end quotation
@end deftypefun

@c page
@node version
@chapter Version functions


The installed libraries follow version numbering as established by the @gnu{} Autotools.  For an
explanation of interface numbers as managed by @gnu{} Libtool @xref{Libtool versioning, interface,
Libtool's versioning system, libtool, Shared library support for @gnu{}}.


@deftypefun {const char *} ccpair_version_string (void)
Return a pointer to a statically allocated @asciiz{} string representing the interface version
number.
@end deftypefun


@deftypefun int ccpair_version_interface_current (void)
Return an integer representing the library interface current number.
@end deftypefun


@deftypefun int ccpair_version_interface_revision (void)
Return an integer representing the library interface current revision number.
@end deftypefun


@deftypefun int ccpair_version_interface_age (void)
Return an integer representing the library interface current age.
@end deftypefun

@c page
@node pairs
@chapter Pair data structures


Pairs are meant to compose simply linked lists as follows:

@example
 -------
| A | D |
 -------
  |   |     -------
  v    --> | A | D |
value       -------
             |   |     -------
             v    --> | A | D |
           value       -------
                        |   |
                        v    --> NULL
                      value
@end example

@noindent
where both @var{A} and @var{D} are pointers; this picture represents the layout of a list of three
items.  Pairs are meant to be allocated on the heap, using a custom memory allocator.


@deftp {Struct Typedef} ccpair_stru_t
Structure type representing a pair.  It is composed of two machine words.  From the point of view of
client code: @strong{pairs are immutable}.
@end deftp


@deftp {Pointer Typedef} ccpair_t
Pointer type representing a pointer to @objtype{ccpair_stru_t}.
@end deftp


@deftypefun uintptr_t ccpair_car (ccpair_t @var{P})
Return the first value in the pair as unsigned integer.  The first value in a pair is called an
@dfn{item}.
@end deftypefun


@deftypefun ccpair_t ccpair_cdr (ccpair_t @var{P})
Return the second value in the pair as pointer to pair.
@end deftypefun


@deftypefun uintptr_t ccpair_cdr_value (ccpair_t @var{P})
Return the second value in the pair as unsigned integer.
@end deftypefun


@deftypefun void ccpair_cons (uintptr_t @var{A}, ccpair_t @var{D})
Allocate a new pair using the currently selected memory allocator.  Initialise the first value with
@var{A} and the second value with @var{D}.
@end deftypefun


@deftypefun void ccpair_free (ccpair_t @var{P})
Release the memory allocated for @var{P} using the currently selected memory allocator.
@end deftypefun

@c page
@node memory
@chapter Memory allocation


@menu
* memory allocator::            Selecting a custom memory allocator.
* memory functions::            Allocating and releasing pairs.
@end menu

@c page
@node memory allocator
@section Selecting a custom memory allocator


@deftp {Struct Type} ccpair_allocator_t
Represent a memory allocator to be used to allocate and release memory for pair structures.  It has
the following fields:

@table @code
@item ccpair_alloc_fun_t * alloc
Pointer to a function that allocates pair structures.

@item ccpair_free_fun_t * free
Pointer to a function that releases pair structures.
@end table

The predefined memory allocator uses the standard functions @cfunc{malloc} and @cfunc{free}.
@end deftp


@deftypefn {Function Type} ccpair_t ccpair_alloc_fun_t (cce_location_t * @var{L}, ccpair_allocator_t const * @var{allocator})
Type of function that allocates a new pair structure using the @var{allocator}.  If successful:
return a pointer to the new structure; otherwise raise an exception performing a non--local exit to
@var{L}.
@end deftypefn


@deftypefn {Function Type} void ccpair_free_fun_t (ccpair_allocator_t const * @var{allocator}, ccpair_t @var{P})
Type of function that releases the pair structure @var{P}, using the @var{allocator}.  This function
cannot fail.
@end deftypefn


@deftypefun {ccpair_allocator_t const *} ccpair_register_allocator (ccpair_allocator_t const * @var{allocator})
Register a new custom allocator and return a pointer to the previous one.
@end deftypefun


As example, the following code implements an allocator using the standard functions @cfunc{malloc}
and @cfunc{free}:

@example
static ccpair_t
standard_alloc (cce_location_t * L,
   ccpair_allocator_t const * allocator CCPAIR_UNUSED)
@{
  ccpair_t      P = malloc(sizeof(ccpair_stru_t));
  if (NULL != P) @{
    return P;
  @} else @{
    cce_raise(L, cce_condition_new_errno_clear());
  @}
@}

static void
standard_free (ccpair_allocator_t const * allocator
   CCPAIR_UNUSED, ccpair_t P)
@{
  free(P);
@}

static ccpair_allocator_t const standard_allocator = @{
  .alloc        = standard_alloc,
  .free         = standard_free
@};
@end example

@c page
@node memory functions
@section Allocating and releasing pairs


All the following functions use the currently selected pair allocator.


@deftypefun ccpair_t ccpair_alloc (void)
Allocate a new pair structure and return a pointer to it.
@end deftypefun


@deftypefun void ccpair_free (ccpair_t @var{P})
Release the memory previously allocated for a pair with @cfunc{ccpair_alloc}.
@end deftypefun


@deftypefun void ccpair_free_list (ccpair_t @var{P})
Release the memory previously allocated for a list of pairs with @cfunc{ccpair_alloc}.
@end deftypefun

@c page
@node accessors
@chapter Accessing items in lists


@deftypefun uintptr_t ccpair_ref (cce_location_t @var{L}, ccpair_t @var{P}, unsigned @var{idx})
Return the item at index @var{idx} in the list whose first pair is @var{P}.  If the list has less
than @var{idx} pairs: raise an exception by performing a non--local exit to @var{L}.
@end deftypefun


@deftypefun uintptr_t ccpair_first (cce_location_t @var{L}, ccpair_t @var{P})
Return the first item in the list whose first pair is @var{P}.  If the list is empty (that is:
@var{P} is @cnull{}): raise an exception by performing a non--local exit to @var{L}.
@end deftypefun


@deftypefun uintptr_t ccpair_second (cce_location_t @var{L}, ccpair_t @var{P})
Return the second item in the list whose first pair is @var{P}.  If the list has less than two
pairs: raise an exception by performing a non--local exit to @var{L}.
@end deftypefun


@deftypefun uintptr_t ccpair_third (cce_location_t @var{L}, ccpair_t @var{P})
Return the third item in the list whose first pair is @var{P}.  If the list has less than three
pairs: raise an exception by performing a non--local exit to @var{L}.
@end deftypefun


@deftypefun uintptr_t ccpair_fourth (cce_location_t @var{L}, ccpair_t @var{P})
Return the fourth item in the list whose first pair is @var{P}.  If the list has less than four
pairs: raise an exception by performing a non--local exit to @var{L}.
@end deftypefun


@deftypefun uintptr_t ccpair_fifth (cce_location_t @var{L}, ccpair_t @var{P})
Return the fifth item in the list whose first pair is @var{P}.  If the list has less than five
pairs: raise an exception by performing a non--local exit to @var{L}.
@end deftypefun


@deftypefun uintptr_t ccpair_sixth (cce_location_t @var{L}, ccpair_t @var{P})
Return the sixth item in the list whose first pair is @var{P}.  If the list has less than six pairs:
raise an exception by performing a non--local exit to @var{L}.
@end deftypefun


@deftypefun uintptr_t ccpair_seventh (cce_location_t @var{L}, ccpair_t @var{P})
Return the seventh item in the list whose first pair is @var{P}.  If the list has less than seven
pairs: raise an exception by performing a non--local exit to @var{L}.
@end deftypefun


@deftypefun uintptr_t ccpair_eighth (cce_location_t @var{L}, ccpair_t @var{P})
Return the eighth item in the list whose first pair is @var{P}.  If the list has less than eigth
pairs: raise an exception by performing a non--local exit to @var{L}.
@end deftypefun


@deftypefun uintptr_t ccpair_nineth (cce_location_t @var{L}, ccpair_t @var{P})
Return the nineth item in the list whose first pair is @var{P}.  If the list has less than nine
pairs: raise an exception by performing a non--local exit to @var{L}.
@end deftypefun


@deftypefun uintptr_t ccpair_tenth (cce_location_t @var{L}, ccpair_t @var{P})
Return the tenth item in the list whose first pair is @var{P}.  If the list has less than ten pairs:
raise an exception by performing a non--local exit to @var{L}.
@end deftypefun

@c page
@node conditions
@chapter Exceptional condition objects


@value{PACKAGE} uses the external library CCExceptions to signal exceptional conditions and errors
through non--local exits; @xref{Top, CCExceptions, CCExceptions, ccexceptions, CCExceptions}.

The functions will raise exceptional conditions with @cfunc{cce_raise} and expect the caller to
intercept them using the @code{cce_location_t} mechanics.  The basic code template is:

@example
#include <ccpair.h>

cce_location_t  L[1];

if (cce_location(L)) @{
  /* Handle errors here. */
  cce_run_error_handlers_final(L);
@} else @{
  /* Do something useful here. */
  cce_run_cleanup_handlers(L);
@}
@end example

@menu
* conditions base::             Base exceptional conditions.
* conditions not-enough::       Not enough items in list.
@end menu

@c page
@node conditions base
@section Base exceptional conditions


@cindex Base exceptional condition
@cindex Exceptional conditions, base


@deftp {Struct Typedef} ccpair_descriptor_base_t
Type of data structure representing the base exceptional--condition descriptor for all the
conditions defined by @value{PACKAGE}.  It has the following public fields:

@table @code
@item cce_descriptor_t descriptor
The condition descriptor's base values.
@end table

The parent of this type descriptor is the root type descriptor defined by the CCExceptions library;
@xref{conditions root, CCExceptions, CCExceptions, ccexceptions, CCExceptions}.
@end deftp


@deftypevr {Dynamic Constant} {const ccpair_descriptor_base_t * const} ccpair_descriptor_base
Pointer to a statically allocated exceptional condition descriptor.
@end deftypevr


@deftypefun bool ccpair_condition_is_base (cce_condition_t const * @var{C})
Return @true{} if @var{C} is of type @objtype{ccpair_descriptor_base_t}; otherwise return @false{}.
@end deftypefun

@c page
@node conditions not-enough
@section Not enough items in list


@cindex Not enough items in list, exceptional condition
@cindex Exceptional conditions, not enough items in list


@deftp {Struct Typedef} ccpair_descriptor_not_enough_items_t
Type of data structure representing a generic exceptional condition descriptor for all the
not_enough_items--related errors; it is the base for all the not_enough_items--related condition
object types.  It has the following public fields:

@table @code
@item cce_descriptor_t descriptor
The condition descriptor's base values.
@end table

The parent of this type descriptor is the one referenced by @code{ccpair_descriptor_base}.
@end deftp


@deftp {Struct Typedef} ccpair_condition_not_enough_items_t
Type of data structure representing an exceptional condition object for a generic not_enough_items--related
error.  It has the following public fields:

@table @code
@item cce_condition_t base
The condition object's base values.
@end table
@end deftp


@deftypevr {Dynamic Constant} {const ccpair_descriptor_not_enough_items_t * const} ccpair_descriptor_not_enough_items
Pointer to a statically allocated exceptional condition descriptor.
@end deftypevr


@deftypefun {cce_condition_t const *} ccpair_condition_new_not_enough_items (void)
Return a pointer to exceptional condition object.
@end deftypefun


@deftypefun bool ccpair_condition_is_not_enough_items (cce_condition_t const * @var{C})
Return @ctrue{} if @var{C} if of type @code{ccpair_descriptor_not_enough_items}; otherwise return
@cfalse{}.
@end deftypefun


To catch this exceptional condition we can do:

@smallexample
cce_location_t        L[1];

if (cce_location(L)) @{
  if (ccpair_condition_is_not_enough_items(cce_condition(L))) @{
    ccpair_condition_not_enough_items_t * C = \
      (ccpair_condition_not_enough_items_t *) cce_condition(L);
    do_something_with(C);
  @}
  cce_run_error_handlers_final(L);
@} else @{
  do_something(L);
  cce_run_cleanup_handlers(L);
@}
@end smallexample

@c page
@node handlers
@chapter Exceptional condition handlers


@menu
* handlers pairs::              Handler for pair release.
* handlers lists::              Handler for list release.
@end menu

@c page
@node handlers pairs
@section Handler for pair release


We can handle pairs that must be released with the function @cfunc{ccpair_free} as follows:

@example
ccsys_location_t  L[1];
ccsys_handler_t   H[1];

if (ccsys_location(L)) @{
  ccsys_run_error_handlers_final(L);
@} else @{
  ccpair_t P = ccpair_cons(1, NULL);
  ccpair_cleanup_handler_pair_init(L, H, P);
  /* do something with P here */
  ccsys_run_cleanup_handlers(L);
@}
@end example

The following symbols are defined in the header file @file{ccpair.h}.


@deftypefun void ccpair_cleanup_handler_pair_init (cce_location_t * @var{L}, cce_handler_t * @var{H}, ccpair_t @var{P})
@deftypefunx void ccpair_error_handler_pair_init (cce_location_t * @var{L}, cce_handler_t * @var{H}, ccpair_t @var{P})
Register @var{H} as cleanup or error handler in the context of @var{L}.  The handler function will
release the memory allocated for the pair referenced by @var{P} using the function
@cfunc{ccpair_free}.
@end deftypefun

@c page
@node handlers lists
@section Handler for list release


We can handle lists that must be released with the function @cfunc{ccpair_free_list} as follows:

@example
ccsys_location_t  L[1];
ccsys_handler_t   H[1];

if (ccsys_location(L)) @{
  ccsys_run_error_handlers_final(L);
@} else @{
  ccpair_t P = ccpair_cons(1, ccpair_cons(2, NULL));
  ccpair_cleanup_handler_list_init(L, H, P);
  /* do something with P here */
  ccsys_run_cleanup_handlers(L);
@}
@end example

The following symbols are defined in the header file @file{ccpair.h}.


@deftypefun void ccpair_cleanup_handler_list_init (cce_location_t * @var{L}, cce_handler_t * @var{H}, ccpair_t @var{P})
@deftypefunx void ccpair_error_handler_list_init (cce_location_t * @var{L}, cce_handler_t * @var{H}, ccpair_t @var{P})
Register @var{H} as cleanup or error handler in the context of @var{L}.  The handler function will
release the memory allocated for the list referenced by @var{P} using the function
@cfunc{ccpair_free_list}.
@end deftypefun

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include lgpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DOCUMENTATION_URL}

@noindent
the latest release of this package can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

